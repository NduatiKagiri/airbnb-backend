---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/cars":
    post:
      summary: Creates a car
      tags:
      - cars
      parameters: []
      responses:
        '201':
          description: Car created
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                car_type:
                  type: string
                brand:
                  type: string
                fee_per_day:
                  type: number
                color:
                  type: string
                image:
                  type: string
              required:
              - name
              - status
          application/xml:
            schema:
              type: object
              properties:
                name:
                  type: string
                car_type:
                  type: string
                brand:
                  type: string
                fee_per_day:
                  type: number
                color:
                  type: string
                image:
                  type: string
              required:
              - name
              - status
  "/api/v1/cars/{id}":
    get:
      summary: Retrieves a Car
      tags:
      - cars
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: name found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  brand:
                    type: string
                  car_type:
                    type: string
                  fee_per_day:
                    type: number
                  color:
                    type: string
                  image:
                    type: string
                  rented:
                    type: boolean
                required:
                - id
                - name
                - brand
                - car_type
                - fee_per_day
                - color
                - image
                - rented
            application/xml:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  brand:
                    type: string
                  car_type:
                    type: string
                  fee_per_day:
                    type: number
                  color:
                    type: string
                  image:
                    type: string
                  rented:
                    type: boolean
                required:
                - id
                - name
                - brand
                - car_type
                - fee_per_day
                - color
                - image
                - rented
        '404':
          description: Car not found
  "/reservations":
    get:
      summary: list reservations
      tags:
      - Reservations
      security:
      - bearerAuth: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    code: 200
                    data:
                    - id: '1'
                      type: reservation
                      attributes:
                        id: 1
                        user_id: 1
                        car_id: 1
                        reservation_date: '2022-10-28'
                        due_date: '2022-11-21'
    post:
      summary: create reservation
      tags:
      - Reservations
      parameters: []
      security:
      - bearerAuth: []
      responses:
        '201':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    code: 201
                    data:
                      id: 6
                      reservation_date: '2022-10-28'
                      due_date: '2022-11-21'
                      car: Car 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reservation_date:
                  type: string
                  format: date
                due_date:
                  type: string
                  format: date
                car:
                  type: string
              required:
              - reservation_date
              - due_date
              - car
  "/users/signup":
    post:
      summary: new registration
      tags:
      - Users
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successfull_request:
                  value:
                    code: 201
                    data:
                      message: Signed up succesfully!
                      user:
                        id: 1
                        name: string
                        email: user@mail.com
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    name:
                      type: string
                    photo:
                      type: string
                    date_of_birth:
                      type: string
                      format: date
                    email:
                      type: string
                      pattern: "^\\S+@\\S+\\.\\S+$"
                      format: email
                    password:
                      type: string
                      format: password
                  required:
                  - name
                  - email
                  - password
              required:
              - user
  "/users/login":
    post:
      summary: create session
      tags:
      - Users
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successfull_login:
                  value:
                    code: 200
                    data:
                      user:
                        id: 1
                        name: User 1
                        email: user@mail.com
                      message: Logged in successfully.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                      pattern: "^\\S+@\\S+\\.\\S+$"
                      format: email
                    password:
                      type: string
                      format: password
                  required:
                  - email
                  - password
  "/users/logout":
    delete:
      summary: delete session
      tags:
      - Users
      security:
      - bearerAuth: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                succesful_logout:
                  value:
                    code: 200
                    data:
                      message: logged out successfully
servers:
- url: https://{defaultHost}
  variables:
    defaultHost:
      default: www.example.com
